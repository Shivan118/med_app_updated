import google.generativeai as genai
from PIL import Image
import io
import docx
from io import BytesIO
import os
from datetime import datetime

def configure_ecg_model(api_key):
    genai.configure(api_key=api_key)
    
    generation_config = {
        "temperature": 1,
        "top_p": 0.95,
        "top_k": 0,
        "max_output_tokens": 8192,
    }

    safety_settings = [
        {
            "category": "HARM_CATEGORY_HARASSMENT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            "category": "HARM_CATEGORY_HATE_SPEECH",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
    ]

    return genai.GenerativeModel(model_name="gemini-1.5-pro-latest",
                                 generation_config=generation_config,
                                 safety_settings=safety_settings)

ecg_analysis_prompt = """
You are the world's top cardiologist and performed 1000 ECGs accoss the world. You are known for giving the best report after analyzing the ECG. 
Your task is to examine ECG images and provide a detailed report. Focus on the following sections, providing specific information for each:

Add a Heading "ECG ANALYSIS REPORT" in Bold Letters, centered at the top of the first page.

1. PATIENT INFORMATION:
   - Name
   - Age
   - Gender
   - ID Number
   - Date of ECG: datetime.now().strftime('%Y-%m-%d')

2. CLINICAL INFORMATION:
   - Reason for ECG
   - Relevant Medical History
   - Medications

3. ECG FINDINGS:
   Rhythm and Rate:
   - Heart Rate
   - Rhythm
   - P Waves
   - PR Interval
   - QRS Complex
   - QT/QTc Interval
   - ST Segment
   - T Waves

   Axis:
   - P Wave Axis
   - QRS Axis
   - T Wave Axis

   Conduction and Morphology:
   - Atrial Conduction
   - Ventricular Conduction
   - QRS Morphology
   - ST-T Changes

4. INTERPRETATION:
   - Normal or Abnormal
   - Diagnosis/Findings
   - Comparison with Previous ECG (if available)

5. CONCLUSION AND RECOMMENDATIONS:
   - Summary
   - Recommendations

6. REPORTING CARDIOLOGIST:
   - Name: Dr. Deepti
   - Signature: 
   - Date of Report: datetime.now().strftime('%Y-%m-%d')

Provide a detailed description for each of these sections using the following format:

**[SECTION NAME]:** [Detailed description based on the points above]

If any specific detail is not visible or cannot be determined from the image, simply say ..... in your remport.

At the end of your report, provide a "CONCLUSION" section summarizing the findings and recommendations. If no abnormalities are detected, state "NORMAL ECG STUDY."

Remember to maintain a professional and objective tone. Use clear, concise language typical of cardiological reports. End your report with the following disclaimer:

"Caution: This analysis is generated by an AI system (MED360). For accurate diagnosis and treatment, please consult with a qualified healthcare professional."
"""

def analyze_ecg(image, model):
    image_data = io.BytesIO()
    image.save(image_data, format='JPEG')
    image_data = image_data.getvalue()
    image_parts = [{"mime_type": "image/jpeg", "data": image_data}]
    prompt_parts = [image_parts[0], ecg_analysis_prompt]
    response = model.generate_content(prompt_parts)
    return response.text

def generate_ecg_doc(content):
    doc = docx.Document()
    
    # Split the content into sections
    sections = content.split('**')
    
    for i, section in enumerate(sections):
        if i % 2 == 0:  # Even indexes are normal text or empty
            continue
        else:  # Odd indexes are headers or content
            # Add the header in bold
            p = doc.add_paragraph()
            p.add_run(section.strip()).bold = True
            
            # If there's content following this header, add it as bullet points
            if i + 1 < len(sections):
                content = sections[i + 1]
                bullet_points = content.split('*')
                for point in bullet_points:
                    if point.strip():
                        doc.add_paragraph(point.strip(), style='List Bullet')
    
    doc_io = BytesIO()
    doc.save(doc_io)
    doc_io.seek(0)
    return doc_io