import google.generativeai as genai
from PIL import Image
import io
import docx
from io import BytesIO
import re
from docx.shared import Pt
from docx.enum.style import WD_STYLE_TYPE

def configure_xrays_model(api_key):
    genai.configure(api_key=api_key)
    
    generation_config = {
        "temperature": 1,
        "top_p": 0.95,
        "top_k": 0,
        "max_output_tokens": 8192,
    }

    safety_settings = [
        {
            "category": "HARM_CATEGORY_HARASSMENT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            "category": "HARM_CATEGORY_HATE_SPEECH",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
    ]

    return genai.GenerativeModel(model_name="gemini-1.5-pro-latest", # gemini-1.5-pro-latest
                                 generation_config=generation_config,
                                 safety_settings=safety_settings)

xray_chest_prompt = """
You are a specialized X-ray analyst focusing on chest radiographs. Your task is to examine chest X-ray images and provide a detailed report. Focus on the following structures and areas, providing specific information for each:

Add a Heading "X-RAY CHEST VIEW" in Bold Letters, centered at the top of the first page.

1. SOFT TISSUES AND BONY CAGE:
   - Overall appearance and any abnormalities

2. CARDIOVASCULAR SYSTEM:
   - Aorta: Size and contour
   - Pulmonary architecture: Distribution and patterns

3. AIRWAYS:
   - Trachea: Position and patency

4. MEDIASTINUM:
   - Overall appearance and any abnormalities

5. HILA:
   - Appearance of both hila

6. DIAPHRAGM AND COSTOPHRENIC ANGLES:
   - Position and shape of both domes of the diaphragm
   - Appearance of costophrenic angles

7. LUNG FIELDS:
   - Overall lung expansion
   - Presence or absence of any infiltrates, masses, or consolidations

8. PLEURAL SPACES:
   - Presence or absence of pleural effusions or pneumothorax

Provide a detailed description for each of these areas using the following format:

**[STRUCTURE/AREA NAME]:** [Detailed description based on the points above]

If any specific detail is not visible or cannot be determined from the image, state "Unable to determine from the provided image."

At the end of your report, provide an "IMPRESSION" section summarizing the findings. If no abnormalities are detected, state "NORMAL STUDY."

Remember to maintain a professional and objective tone. Use clear, concise language typical of radiological reports. End your report with the following disclaimer:

"Caution: This analysis is generated by an AI system (MED360). For accurate diagnosis and treatment, please consult with a qualified healthcare professional."
"""


def analyze_xrays(image, model):
    image_data = io.BytesIO()
    image.save(image_data, format='JPEG')
    image_data = image_data.getvalue()
    image_parts = [{"mime_type": "image/jpeg", "data": image_data}]
    prompt_parts = [image_parts[0], xray_chest_prompt]
    response = model.generate_content(prompt_parts)
    return response.text

def generate_xrays_doc(content):
    doc = docx.Document()
    
    # Modify existing styles or add if they don't exist
    styles = doc.styles
    
    if 'Heading 1' in styles:
        heading_style = styles['Heading 1']
    else:
        heading_style = styles.add_style('Heading 1', WD_STYLE_TYPE.PARAGRAPH)
    heading_style.font.size = Pt(14)
    heading_style.font.bold = True
    
    if 'Normal' in styles:
        normal_style = styles['Normal']
    else:
        normal_style = styles.add_style('Normal', WD_STYLE_TYPE.PARAGRAPH)
    normal_style.font.size = Pt(11)
    
    # Split the content into sections
    sections = re.split(r'\*\*(.*?)\*\*', content)
    
    for i, section in enumerate(sections):
        if i % 2 == 0:  # Even indexes are content
            if section.strip():
                paragraphs = section.split('\n')
                for paragraph in paragraphs:
                    paragraph = paragraph.strip()
                    if paragraph:
                        # Remove leading dashes, asterisks, and dots
                        paragraph = re.sub(r'^[-*â€¢.]+\s*', '', paragraph)
                        p = doc.add_paragraph(paragraph, style='Normal')
                        p.paragraph_format.space_after = Pt(0)
                        p.paragraph_format.space_before = Pt(0)
        else:  # Odd indexes are headers
            if section.strip():
                doc.add_paragraph(section.strip(), style='Heading 1')
    
    doc_io = BytesIO()
    doc.save(doc_io)
    doc_io.seek(0)
    return doc_io


"""
def generate_xrays_doc(content):
    doc = docx.Document()
    
    # Split the content into sections
    sections = content.split('**')
    
    for i, section in enumerate(sections):
        if i % 2 == 0:  # Even indexes are normal text or empty
            continue
        else:  # Odd indexes are headers or content
            # Add the header in bold
            if section.strip():
                p = doc.add_paragraph()
                p.add_run(section.strip()).bold = True
            
            # If there's content following this header, add it as normal text and bullet points
            if i + 1 < len(sections):
                content = sections[i + 1]
                paragraphs = content.split('\n')
                for paragraph in paragraphs:
                    paragraph = paragraph.strip()
                    if paragraph:
                        if paragraph.startswith('*'):
                            # This is a bullet point
                            doc.add_paragraph(paragraph[1:].strip(), style='List Bullet')
                        else:
                            # This is normal text
                            doc.add_paragraph(paragraph)
    
    # Remove any empty paragraphs
    for paragraph in doc.paragraphs:
        if not paragraph.text.strip():
            p = paragraph._element
            p.getparent().remove(p)
    
    # Add the disclaimer as a separate paragraph
    #caution = "Caution: This is an AI BOT made by MED360. Consult with a Doctor before making any decisions."
    #doc.add_paragraph(caution)
    
    doc_io = BytesIO()
    doc.save(doc_io)
    doc_io.seek(0)
    return doc_io

"""